// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;

using Foundation;
using UIKit;

using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class StoreListController : UITableViewController
	{
		public OrderViewController OrderController { get; set; }

		StoreListSource StoreListSource;

		Customer _customer {
			get;
			set;
		}

		public Customer Customer { 
			get {
				return this._customer;
			} 
			set {
				this._customer = value;
//				if (OrderController != null) 
//					OrderController.SelectedCustomer (value);
			}
		}

		public StoreListController (IntPtr handle) : base (handle)
		{
			StoreListSource = new StoreListSource (this);
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Add Scope titles here for StoreLook up
			this.searchBar.ScopeButtonTitles = new string[2]{ "Store Name", "State" };
			this.searchBar.ShowsScopeBar = true;
			this.searchBar.SizeToFit ();

			// if we're calling this from the OrderViewController then customer list should not be editable
			// customers are not editable for Wrigley's
//			if (OrderController == null)
//				CustomerListSource.IsEditable = true;
//			else {
//				NavigationItem.Title = "Select Customer";
//				CustomerListSource.IsEditable = false;
//			}

			TableView.Source = StoreListSource;

			searchBar.SelectedScopeButtonIndexChanged += (object sender, UISearchBarButtonIndexEventArgs e) => {

				StoreListSource.Filter = (StoreListSource.SearchScope) ((int)e.SelectedScope);

				if (searchBar.Text != null && searchBar.Text.Trim().Length > 0)
					TableView.ReloadData();
				switch (e.SelectedScope) {
				case (int) StoreListSource.SearchScope.NAME:
					searchBar.Placeholder = "Store Name";
					break;
//				case (int) StoreListSource.SearchScope.ID:
//					searchBar.Placeholder = "Store ID";
//					break;
				case (int) StoreListSource.SearchScope.STATE:
					searchBar.Placeholder = "State";
					break;
				}
			};

			searchBar.TextChanged += (object sender, UISearchBarTextChangedEventArgs e) => {
				StoreListSource.searchString = searchBar.Text;
				TableView.ReloadData ();
			};

			// TODO: find out why ResignFirstResponder doesn't work on modal windows
			searchBar.SearchButtonClicked += (sender, e) => {
				searchBar.ShowsCancelButton = false;
				searchBar.ResignFirstResponder();
			};

			searchBar.OnEditingStarted += (sender, e) => {
				searchBar.ShowsCancelButton = true;
			};
			
			searchBar.CancelButtonClicked += (sender, e) => {
				searchBar.ShowsCancelButton = false;
				searchBar.ResignFirstResponder();
			};
		}

		public override void ViewWillAppear (bool animated)
		{
			StoreListSource.refreshCustomerList();
			TableView.ReloadData();
			base.ViewWillAppear (animated);


		}

		public override bool ShouldPerformSegue (string segueIdentifier, NSObject sender)
		{
			if (segueIdentifier == "EditCustomerSegue" && this._customer == null)
				return false;
			else
				return base.ShouldPerformSegue (segueIdentifier, sender);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			var customerEditorController = segue.DestinationViewController as StoreViewController;
			customerEditorController.StoreListController = this;
			if (segue.Identifier == "EditCustomerSegue")
				customerEditorController.Customer = this._customer;
		}

		partial void doubleTap (Foundation.NSObject sender) {
			if (OrderController == null)
				PerformSegue("EditCustomerSegue", this);
			else {
				OrderController.SelectedCustomer=_customer;
				NavigationController.PopViewController(true);
			}
		}

		partial void save (Foundation.NSObject sender) {
			if (OrderController != null) 
				OrderController.SelectedCustomer=_customer;
			NavigationController.PopViewController(true);
		}

		partial void dismiss (NSObject sender)
		{
			if (OrderController != null && _customer != null) 
				OrderController.SelectedCustomer=_customer;
			DismissViewController (true, null);
		}
	}
}
