// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using System.Linq;
using System.Collections.Generic;

using Foundation;
using UIKit;

using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class AddressEditorController : UIViewController
	{
		static DALFacade dal;
		static IList<Country> countryList;
		public static Address Address { get; set; }

		public StoreViewController parentController { get; set; }
		public string AddressTypeText { get; set; }
		public Customer Customer { get; set; }

		public AddressEditorController (IntPtr handle) : base (handle)
		{
			dal = new DALFacade ();
			countryList = dal.getCountryList ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			CountryPicker.Model = new CountryPickerModel ();

			Street1Field.Text = Address.Street1;
			Street2Field.Text = Address.Street2;
			CityField.Text = Address.City;
			ZipCodeField.Text = Address.ZipCode;

			// set the default country if it has no value
			IEnumerable<Country> countries = null;
			if (Address.Country == null || Address.Country == "" ||
			    (countries = countryList.Where (c => c.Code.ToUpper () == Address.Country)).Count() <= 0) {

				// TODO: get the default value from user preferences (once it has been implemented)
				var defaultCountry = countryList.Where (c => c.Code.ToUpper () == "AU").First ();
				CountryPicker.Select (countryList.IndexOf (defaultCountry), 0, false);
				Address.Country = defaultCountry.Name;

			} else {
				var addressCountry = countries.First ();
				CountryPicker.Select(countryList.IndexOf (addressCountry), 0, false);
			}
			AddressTypeLabel.Text = AddressTypeText;

			// TODO: find out why ResignFirstResponder doesn't work on modal windows
			AutoHideKeyboard();
		}

		// TODO: find out why ResignFirstResponder doesn't work on modal windows
		void AutoHideKeyboard ()
		{
			this.Street1Field.ShouldReturn += ( field ) =>  {
				field.ResignFirstResponder ();
				return true;
			};
			this.Street2Field.ShouldReturn += ( field ) =>  {
				field.ResignFirstResponder ();
				return true;
			};
			this.CityField.ShouldReturn += ( field ) =>  {
				field.ResignFirstResponder ();
				return true;
			};
			this.ZipCodeField.ShouldReturn += ( field ) =>  {
				field.ResignFirstResponder ();
				return true;
			};
		}

		partial void saveAddress (NSObject sender)
		{
			if (AddressTypeText.StartsWith ("Shipping")) {
				Customer.ShipToStreet1 = Street1Field.Text;
				Customer.ShipToStreet2 = Street2Field.Text;
				Customer.ShipToCity = CityField.Text;
				Customer.ShipToZipCode = ZipCodeField.Text;
				Customer.ShipToCountry = Address.Country;
			} else if (AddressTypeText.StartsWith ("Billing")) {
				Customer.BillToStreet1 = Street1Field.Text;
				Customer.BillToStreet2 = Street2Field.Text;
				Customer.BillToCity = CityField.Text;
				Customer.BillToZipCode = ZipCodeField.Text;
				Customer.BillToCountry = Address.Country;
			}

			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone)
				NavigationController.PopViewController(true);
			else {
				// #101 - address not needed by Wrigley's
//				parentController.RefreshAddresses();
				DismissViewController (true, null);
			}
		}

		partial void dismiss (Foundation.NSObject sender)
		{
			DismissViewController (true, null);
		}

		public class CountryPickerModel : UIPickerViewModel
		{
			public CountryPickerModel ()
			{
			}

			public override nint GetComponentCount (UIPickerView picker)
			{
				return 1;
			}

			public override nint GetRowsInComponent (UIPickerView picker, nint component)
			{
				return countryList.Count;
			}

			public override string GetTitle (UIPickerView picker, nint row, nint component)
			{
				return countryList [(int)row].Name;
			}

			public override void Selected (UIPickerView picker, nint row, nint component)
			{
				Address.Country = countryList [(int)row].Code;
			}
		}
	}
}
