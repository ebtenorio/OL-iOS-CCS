// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;

using Foundation;
using UIKit;

using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class OrderLineViewController : UIViewController
	{
		public OrderViewController OrderController { get; set; }

		public string ProviderName { get; set; }
		public bool IsRegularOrder { get; set; }
		public int SectionHeaderCount { get; set; } 
		public DateTime ReleaseDate { get; set; } = DateTime.Now;

		// DateCriteria : RequestedReleaseDate and OrderDates
		public DateTime DateCriteria { get; set; }

		Product _selectedProduct;

		public Product SelectedProduct { 
			get {
				return _selectedProduct;
			}
			set{
				_selectedProduct = value;
				if (OrderLineSKULabel != null) {
					OrderLineSKULabel.Text = _selectedProduct.SKU.ToString ();
				}

				if (QuantityStepper != null)
					ResetStepper ();

				if (ProductLabel != null) {
					ProductLabel.Text = _selectedProduct.Name;
					OrderLineQuantityField.Enabled = true;
					if (OrderLineQuantityField.Text == null || OrderLineQuantityField.Text == "0")
						OrderLineQuantityField.Text = "";
					OrderLineQuantityField.Selected = true;
				}
				if (AddItemButton != null) {
					AddItemButton.Enabled = true;
				}

				if (OrderLineQuantityField != null)
					OrderLineQuantityField.BecomeFirstResponder ();
			} 
		}

		public OrderLineViewController (IntPtr handle) : base (handle)
		{
		}			
			
		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();
			this.ResizeViewController ();
		}

		public override void ViewDidLoad ()
		{
 			base.ViewDidLoad ();
			this.ResizeViewController ();

			this.ProviderProductsLabel.Text = "Products for " + ProviderName;
			this.OrderLineQuantityField.Started += (object sender, EventArgs e) => {
				// empty the field if the value is zero
				if (this.OrderLineQuantityField.Text == "0") {
					this.OrderLineQuantityField.Text = "";
				}
			};


			this.OrderLineQuantityField.ShouldReturn += (textField) => {
				addItem(textField);
				return true;
			};

			this.OrderLineQuantityField.EditingChanged += (object sender, EventArgs e) => {
				var origValue = this.OrderLineQuantityField.Text;
				if (origValue != null && origValue.Trim().Length > 0) {
					try {
						var intValue = Convert.ToUInt32 (OrderLineQuantityField.Text);
						QuantityStepper.Value = intValue;
					} catch {
						this.OrderLineQuantityField.Text = origValue;
						BeginInvokeOnMainThread ( () => {
							new UIAlertView("Incorrect Value", "Please enter positive integer values only.", null, "OK", null).Show();
						});
					}
				} else {
					this.OrderLineQuantityField.Text = "0";
					QuantityStepper.Value = 0;
				}
			};
		}

		partial void dismiss (Foundation.NSObject sender)
		{
			DismissViewController (true, null);
		}

		partial void stepperAction (Foundation.NSObject sender)
		{
			var stepper = (UIStepper)sender;
			OrderLineQuantityField.Text = stepper.Value.ToString ();
			// no pricing information required for Wrigley's
//			AmountLabel.Text = String.Format("{0:C}", 
//			                                 QuantityStepper.Value * Convert.ToDouble(_selectedProduct.UnitPrice));
		}                                                                                                                                                                                             

		public void ResetStepper ()
		{
			QuantityStepper.Enabled = true;
			var orderLineItem = OrderController.GetOrderLineItem (_selectedProduct);
			if (orderLineItem != null) {
				OrderLineQuantityField.Text = String.Format ("{0}", orderLineItem.Quantity);
				QuantityStepper.Value = orderLineItem.Quantity;
				// no pricing information required for Wrigley's
//				AmountLabel.Text = String.Format ("{0:C}",
//				                                 QuantityStepper.Value * 
//					Convert.ToDouble (orderLineItem.Product.UnitPrice));
			} else {
//				AmountLabel.Text = "";
				OrderLineQuantityField.Text = "0";
				QuantityStepper.Value = 0;
			}
		}

		partial void addItem (Foundation.NSObject sender)
		{
			var quantityText = OrderLineQuantityField.Text;
			if (quantityText != null && quantityText.Trim().Length > 0) {
				try {
					var quantity = Convert.ToInt32 (quantityText);
					if (quantity > 0) {
						OrderController.AddOrderLineItem (_selectedProduct, quantity);
						OrderController.DisableProviderButton();
						QuantityStepper.Value = quantity;
					}
				} catch (Exception e) {
//					Logger.log ("Cannot convert quantity to text: " + e.Message);
					new UIAlertView("Invalid Quantity", e.Message, null, "OK", null).Show();
					ResetStepper();
				}
			}
			// navigate back to the order screen if this is an iPhone/iPodTouch
			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone)
				NavigationController.PopViewController(true);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier == "ProductSelectionSegue") {
				var productSelectionViewController = segue.DestinationViewController as ProductSelectionViewController;
				productSelectionViewController.OrderLineViewController = this;
				productSelectionViewController.ProviderID = OrderController.ProviderID;

				// OrderType Testing - Setting of the IsRegularOrder property starts here
				productSelectionViewController.IsRegularOrder = this.IsRegularOrder;
				productSelectionViewController.DateCriteria = this.DateCriteria;
				productSelectionViewController.ReleaseDate = this.ReleaseDate;

		}
		}

		public void ResizeViewController(){

			float _modalViewWidth;
			float _modalViewHeight;

			UIInterfaceOrientation _currentDeviceOrientation = (UIInterfaceOrientation)UIDevice.CurrentDevice.Orientation;

			if (_currentDeviceOrientation == UIInterfaceOrientation.LandscapeLeft || _currentDeviceOrientation == UIInterfaceOrientation.LandscapeRight) {
				// Ladscape Mode
				_modalViewWidth = 700;
				_modalViewHeight = 670;
			} else {
				// Portrait Mode
				_modalViewHeight = 760;
				_modalViewWidth = 660;
			}

	
			int _iosver = int.Parse ((UIDevice.CurrentDevice.SystemVersion.ToString ().Split ('.') [0].ToString ()));

			if (_iosver == 7) {


			} else if (_iosver >= 8) {

				this.PreferredContentSize = new CoreGraphics.CGSize (_modalViewWidth, _modalViewHeight);

			}
		
		}
			
	}
}
