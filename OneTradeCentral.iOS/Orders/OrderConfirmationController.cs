// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Threading.Tasks;
using Foundation;
using UIKit;
using BigTed;
using OneTradeCentral.DTOs;
using System.Globalization;

namespace OneTradeCentral.iOS
{
	public partial class OrderConfirmationController : UIViewController
	{
		static WebServiceFacade webservice;
		static DALFacade dal;
		private static DateTime MinimumDate = DateTime.Parse ("Jan 1, 1900", new CultureInfo ("en-US"));

		NSDateFormatter dateFormatter = new NSDateFormatter(){
			DateFormat = "dd/MM/yyyy"
		};

		public Order Order { get; set; }
		          
		public OrderViewController orderViewController { get; set; }

		public string WarehouseName { get; set; }

		public OrderConfirmationController (IntPtr handle) : base (handle)
		{
			if (dal == null)
				dal = new DALFacade ();
			if (webservice == null)
				webservice = new WebServiceFacade ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			if (orderViewController.ReleaseDateField.Text.ToUpper () == "TODAY") {
				Order.RequestedReleaseDate = DateTime.Now;
			} else if (orderViewController.RequestedReleaseDate == null) {
				Order.RequestedReleaseDate = MinimumDate;
			} else {
				Order.RequestedReleaseDate = (DateTime)orderViewController.RequestedReleaseDate;
			}
		
			if (Order == null) 
				Order = new Order ();
			OrderConfirmationTableView.Source = new OrderLineSource (Order.OrderLineList);
			CompanyNameLabel.Text = Order.Customer.Name + " " + Order.Customer.StateCode.ToUpper ();;

//			if (dateFormatter.ToString (NSDate.Now) == dateFormatter.ToString ((NSDate)Order.OrderDate)) {
//				OrderDateLabel.Text = "Today";
//			} else {
//				OrderDateLabel.Text = dateFormatter.ToString ((NSDate)Order.OrderDate);
//			}
//
			OrderDateLabel.Text = dateFormatter.ToString ((NSDate)Order.OrderDate);

			if (orderViewController.OrderType  == Constants.ORDERTYPE.PRESELL) {
				this.StateLabel.Font = UIFont.BoldSystemFontOfSize (nfloat.Parse ("17"));
				this.ReleaseDateLabel.Text = "";
				this.StateLabel.Text = "Pre-sell"; 
			} else if (orderViewController.OrderType == Constants.ORDERTYPE.REGULAR) {
				this.ReleaseDateLabel.Text = "Release Date : ";

				if (Order.RequestedReleaseDate != null) {

					if (orderViewController.ReleaseDateField.Text == "Today") {
						Order.RequestedReleaseDate = (DateTime)NSDate.Now;
					}

					if (dateFormatter.ToString (NSDate.Now) == dateFormatter.ToString ((NSDate)Order.RequestedReleaseDate)) {
						this.StateLabel.Text = "Today";
					} else {
						this.StateLabel.Text = dateFormatter.ToString ((NSDate)Order.RequestedReleaseDate);
					}
				}
			}


			ProviderLabel.Text = Order.ProviderName;
//			if (Order.HoldDate != null && Order.HoldDate != DateTime.MinValue)
//				HoldDateLabel.Text = Order.HoldDate.ToLocalTime ().ToShortDateString ();
//			else
//				HoldDateLabel.Text = "N/A";

//			OrderNumberLabel.Text = Order.OrderNumber;

			// see ticket #132, store id is entered by sales reps
//			StoreIDLabel.Text = Order.Customer.Code;
			StoreIDLabel.Text = "(" + Order.StoreID + ")";
			WarehouseLabel.Text = WarehouseName;
			StoreMgrName.Text = String.Format("{0} {1} ({2})", 
			                                  Order.StoreMgrFirstName, Order.StoreMgrLastName, Order.StoreMgrEmail);
		}

		private string SaveSignatureImage (UIImage image, string filename)
		{
			var SigImageDirectory = Constants.SigImageDirectory;
			if (!Directory.Exists (SigImageDirectory))
				Directory.CreateDirectory(SigImageDirectory);

			string imageFileName = System.IO.Path.Combine (SigImageDirectory, filename);
			NSData imgData = image.AsPNG ();
			NSError err = null;
			if (imgData.Save (imageFileName, false, out err)) {
//				Logger.log ("saved as " + imageFileName);
				return imageFileName;
			} else {
				Logger.log ("Error Saving Signature: " + err.LocalizedDescription);
				return null;
			}
		}

		partial void sendOrder (Foundation.NSObject sender)
		{
			//string _errorMessage = "";

			// Check version before sending the order.
			//if(webservice.IsCorrectOrdersWSVersion(Identity.MajorVersion(), Identity.MinorVersion(), out _errorMessage)){
			
			if (SignatureView.signature.IsBlank) {
				new UIAlertView ("Unsigned Order", "Please Sign the Order Form.", null, "OK", null).Show ();
				}else {
				// save the signature
				UIImage signatureImage = SignatureView.signature.GetImage ();
				var fileName = Identity.UserName + "-" + Guid.NewGuid ().ToString ();
				string imageFilepath = SaveSignatureImage (signatureImage, fileName);
				if (imageFilepath == null)
					Logger.log ("Error Saving Signature for " + Order.Customer.Name);
				Order.SignatureFilename = fileName;

				// generate a GUID for this order
				Order.GUID = Guid.NewGuid ().ToString();

				if(orderViewController.OrderType == Constants.ORDERTYPE.REGULAR){
					Order.IsRegularOrder = true;
				}
				else{
					Order.IsRegularOrder = false;
				}


				// now, save the order
				int orderPK = dal.SaveOrder (Order);
				if (orderPK > 0) {
					// save the modified customer information
//					dal.SaveCustomer(Order.Customer);
					dal.updateCustomerContactDetails (Order.Customer);
					BackgroundWorker.Instance.UploadOrder(Order);
					// TODO: This has been deprecated in the latest version of BTProgressHUD.  Find out what the replacement is.
//					BTProgressHUD.SetAnimationDelay (1.5);
					BTProgressHUD.ShowSuccessWithStatus ("Order saved.");
					var parentController = NavigationController.ViewControllers [0] as OrderViewController;



					parentController.reset ();
					NavigationController.PopToRootViewController (true);
					} else {
					new UIAlertView("DB Error", "Error saving purchase order, please contact your administrator.", null, "OK", null);
					}
				}
			}
//			else{
//
//
//				new UIAlertView ("Connection rejected", _errorMessage,	null, "OK", null).Show();
//
//			}




		public class OrderLineSource: UITableViewSource
		{
			static readonly NSString _cellID = new NSString ("OrderLineItemCell");
			IList<OrderLine> _orderLineList;

			public OrderLineSource (IList<OrderLine> orderLineList)
			{
				_orderLineList = orderLineList;
			}

			public override bool CanEditRow (UITableView tableView, NSIndexPath indexPath)
			{
				// confirmation screen is read-only
				return false;
			}

			public override nint NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override nint RowsInSection (UITableView tableview, nint section)
			{
				if (_orderLineList == null)
					return 0;
				else 
					return _orderLineList.Count;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (UITableViewCell)tableView.DequeueReusableCell (_cellID, indexPath);
				cell.TextLabel.Text = _orderLineList [indexPath.Row].Product.Name;
				cell.DetailTextLabel.Text = "Quantity: " + _orderLineList [indexPath.Row].Quantity.ToString ();
				return cell;
			}

			public override string TitleForHeader (UITableView tableView, nint section)
			{
				return "Order Line Items:";
			}

			public override string TitleForFooter (UITableView tableView, nint section)
			{
				return String.Format ("Line Items: {0}", _orderLineList.Count);
			}
		}
	}
}
