// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using System.IO;
using System.Threading.Tasks;
using Foundation;
using UIKit;
using SQLite;
using OneTradeCentral.DTOs;
using BigTed;

namespace OneTradeCentral.iOS
{
	public partial class AppInfoViewController : UIViewController
	{
//		SpinnerOverlay spinner;

		DALFacade dalFacade = new DALFacade ();
		WebServiceFacade ws = new WebServiceFacade ();

		public AppInfoViewController (IntPtr handle) : base (handle)
		{
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			ShowDatabaseRecords ();

			if (dalFacade.getUserAccount () == null || !Identity.FindKeyChainEntryForDeviceIdentifier() || !Identity.FindKeyChainEntry() || !Identity.FindKeyChainEntryForOrderLincVersion()) {			
				SyncBarButton.Enabled = false;
				PerformSegue ("RegistrationSegue", this.RegisteredUserLabel);

			} else {
				ResetLogo ();
			}

			if (Constants.RegistryServiceURL != Constants.PRODUCTION_URL) {
				ModeLabel.Hidden = false;
				if (Constants.RegistryServiceURL == Constants.STAGING_URL) {
					ModeLabel.Text = "STAGING";
				} else if (Constants.RegistryServiceURL == Constants.DEVELOPMENT_URL) {
					ModeLabel.Text = "DEVELOPMENT";
				} else if (Constants.RegistryServiceURL == Constants.TEST_URL) {
					ModeLabel.Text = "TEST";
				} else if (Constants.RegistryServiceURL == Constants.TEST_URL) {
					ModeLabel.Text = "AWS";
				} else {
					ModeLabel.Text = "WARNING: Contact Admin.";
				}
			}
		}

		public override bool ShouldPerformSegue (string segueIdentifier, NSObject sender)
		{
			if (segueIdentifier == "SynchSegue") {

				bool synchronize = false;
				UIAlertView alert = new UIAlertView ("Reset Database",
				                                     "This will override your existing data.  Do you want to continue?",
				                                     null, "Cancel", "Yes") {
					AlertViewStyle = UIAlertViewStyle.Default,
				};
				
				alert.Dismissed += (object s, UIButtonEventArgs e) => {
					//				Logger.log (e.ButtonIndex);
					if (e.ButtonIndex == 1) {
						synchronize = true;
					}
				};

				alert.Show ();

				return synchronize;
			} else 
				return base.ShouldPerformSegue (segueIdentifier, sender);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			switch (segue.Identifier) {
			case "RegistrationSegue":
				{
					var loginController = segue.DestinationViewController as LoginViewController;
					loginController.CurrentUser = this.RegisteredUserLabel.Text.Trim ();
				
					loginController.AppInfoViewController = this;
					break;
				}
			case "OrderStatusInfoSegue":
				{
					var orderStatusController = segue.DestinationViewController as OrderStatusController;
					CoreGraphics.CGSize pSize = new CoreGraphics.CGSize (216, 216);
					orderStatusController.PreferredContentSize = pSize;
					break;
				}
//
			}

		}

		public void EnableSyncButton(bool enabled) {
			SyncBarButton.Enabled = enabled;
		}

		public void ResetLogo() {
			BeginInvokeOnMainThread (() => {
				string logoPath = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
				string logoFileName = "logo.png";
				string localFilePath = Path.Combine (logoPath, logoFileName);
				UserLogo.Image = UIImage.FromFile (localFilePath );
			});
		}

		partial void ClearOrderTables (Foundation.NSObject sender) {
			UIAlertView alert = 
				new UIAlertView ("Clear Order Tables", "This will remove all Orders.  Do you want to continue?",
				                 null, "Cancel", "Yes") {
				AlertViewStyle = UIAlertViewStyle.Default,
			};
			alert.Dismissed += (object s, UIButtonEventArgs e) => {
				if (e.ButtonIndex == 1) {
					//dalFacade.resetOrderTables();
					ShowDatabaseRecords();
				}
			};
			alert.Show();
		}

		partial void SynchronizeData (Foundation.NSObject sender)
		{

			string _errorMessage = "";
			string _errorHeader = "";
		
			// Check if Internet is accessible via Wifi or Carrier Data Network
			if(Reachability.InternetConnectionStatus() == NetworkStatus.ReachableViaCarrierDataNetwork || 
				Reachability.InternetConnectionStatus() == NetworkStatus.ReachableViaWiFiNetwork){
			
				if(ws.IsCorrectOrdersWSVersion(Identity.MajorVersion(), Identity.MinorVersion(), out _errorMessage, out _errorHeader)){

					if (Identity.FindKeyChainEntry ()) {
						UIAlertView alert = 
							new UIAlertView ("Synchronize Database", "This might take a few minutes to complete.  Do you want to continue?",
								null, "Cancel", "Yes") {
							AlertViewStyle = UIAlertViewStyle.Default,
						};

						alert.Dismissed += (object s, UIButtonEventArgs e) => {
							if (e.ButtonIndex == 1) {
								BTProgressHUD.Show (maskType: ProgressHUD.MaskType.Gradient);
								Task.Factory.StartNew(() => {

									// Delete orders that are more than 90 days old.
									Logger.log("Deleting orders older than 90 days.");
									DeleteOldOrders(Constants.PurgePeriodInDays);
									Logger.log("Orders more than 90 days old were deleted.");

									// Sync with database
									Logger.log("Starting synchronization.");
									SynchronizeReferenceData ();
									Logger.log("Synchronization done.");

								}).ContinueWith( t => {
									BeginInvokeOnMainThread (() => {
										ShowDatabaseRecords ();
										BTProgressHUD.Dismiss();
									});
								});
							}
						};

						alert.Show ();
					} else {
						new UIAlertView("Registration Required", "Please register this device first.", null, "OK", null).Show();
					}
				}
				else{
					Logger.log(_errorHeader);
					new UIAlertView (_errorHeader, _errorMessage,	null, "OK", null).Show();
				}


			}
			else{
				// No internet connection
				Logger.log("Please check network connection.");
				new UIAlertView ("Network connection error", "Please check network connection",	null, "OK", null).Show();
			}

		}

		public void DeleteOldOrders(int _daysOld){
			dalFacade.DeleteOldOrders (_daysOld);
		}

		public void SynchronizeReferenceData ()
		{

			if (dalFacade.getUserAccount () != null) {

				AppInfo appInfo = dalFacade.getApplicationInfo ();
				try {
				
					dalFacade.synchronizeReferenceData ();

					// moved from outside the block, to after sucessful synch.
					appInfo.LastSyncDate = DateTime.Now;
					dalFacade.updateApplicationInfo (appInfo);

				} catch (Exception e) {
					BeginInvokeOnMainThread (() => {
						new UIAlertView ("Error", e.Message, null, "OK", null).Show ();
					});
				}
			}
		}

		/// <summary>
		/// Shows the database records.
		/// </summary>
		public void ShowDatabaseRecords ()
		{
			
			int salesRepAccountID = 0;

			if (dalFacade.getUserAccount () != null) {
				salesRepAccountID = (int)dalFacade.getUserAccount ().AccountID;
			}
	
		
			// COMMENTED OUT - Remove new line after testing - if need be
			if  (dalFacade.getUserAccount() == null)  //(Identity.UserName == null || Identity.UserName.Trim ().Length <= 0)
				RegisteredUserLabel.Text = "<unregistered>";
			else
				RegisteredUserLabel.Text = Identity.UserName;


			Identity.FindKeyChainEntryForDeviceIdentifier ();
			MachineIDLabel.Text = Identity.DeviceIdentifier ();
			ProviderCountLabel.Text = dalFacade.CountProviders ().ToString ();

			//if (dalFacade.CountFutureProducts () == dalFacade.CountUniqueProducts ()) {				
			if (dalFacade.CountUniqueProducts () == (dalFacade.CountFutureProducts () + dalFacade.CountUniqueProducts ())) {
				ProductCountLabel.Text = dalFacade.CountUniqueProducts ().ToString ();
	
			} else {
				ProductCountLabel.Text = dalFacade.CountUniqueProducts ().ToString () + "  (" + (dalFacade.CountFutureProducts () + dalFacade.CountUniqueProducts ()).ToString () + ")";
			}


			// Must confirm first if this is OK.
			//if (dalFacade.CountProductGroups () == dalFacade.CountFutureProductGroups ()) {
				ProductGroupCountLabel.Text = dalFacade.CountProductGroups ().ToString ();
			//} else {
			//	ProductGroupCountLabel.Text = dalFacade.CountProductGroups ().ToString () + "  (" + (dalFacade.CountProductGroups () + dalFacade.CountFutureProductGroups ()).ToString() + ")";
			//}

			CustomerCountLabel.Text = dalFacade.CountUniqueCustomers ().ToString ();
			WareHouseLabel.Text = dalFacade.CountUniqueWarehouse ().ToString ();

			var totalOrders = dalFacade.CountOrders (salesRepAccountID);
			OrderCountLabel.Text = totalOrders.ToString ();
			OrderLinesCountLabel.Text = dalFacade.CountOrderLines (salesRepAccountID).ToString ();
			var completedOrders = dalFacade.CountCompletedOrders (salesRepAccountID);

			// Change the color of the count to RED, if the number of unsent orders is greater then 0
			if ((totalOrders - completedOrders) > 0) {

				OrdersForUploadLabel.TextColor = UIColor.Red;
				OrdersForUploadLabel.Font = UIFont.BoldSystemFontOfSize (15);

				UnsentTitleLabel.TextColor = UIColor.Red;
				UnsentTitleLabel.Font = UIFont.BoldSystemFontOfSize (15);

			} else {

				OrdersForUploadLabel.TextColor = UIColor.Black;
				OrdersForUploadLabel.Font = UIFont.SystemFontOfSize (14);

				UnsentTitleLabel.TextColor = UIColor.Black;
				UnsentTitleLabel.Font = UIFont.SystemFontOfSize (14);
			}

			OrdersForUploadLabel.Text = (totalOrders - completedOrders).ToString();

			var syncDateTime = dalFacade.getLastSyncDate ();
			SyncDateLabel.Text = syncDateTime.ToLongDateString () + ", " + syncDateTime.ToLongTimeString ();
			var versionString = NSBundle.MainBundle.InfoDictionary["CFBundleShortVersionString"].ToString();
			var buildString = NSBundle.MainBundle.InfoDictionary["CFBundleVersion"].ToString();
			VersionLabel.Text = versionString + "-" + buildString;
			iOSVersionLabel.Text = UIDevice.CurrentDevice.SystemVersion ;

		}
			
	}
}
