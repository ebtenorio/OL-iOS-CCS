// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using System.Linq;
using System.Collections.Generic;

using Foundation;
using UIKit;

using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class ProductEditorController : UIViewController
	{
		
		static DALFacade dal = new DALFacade ();
		static IList<UOM> UOMList = null;
		static IList<ProductCategory> ProductCategoryList = null;
		public Product Product { get; set; }
		static ProductCategory SelectedProductCategory;
		static UOM SelectedUOM;

		public ProductListController parentController { get; set; }

		public ProductEditorController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
//			if (UOMPicker != null)
//				UOMPicker.Model = new UOMPickerModel ();
//			if (CategoryPicker != null)
//				CategoryPicker.Model = new CategoryPickerModel ();

			if (Product == null || Product.PK <= 0) {
				NavigationItem.Title = "New Product";

				Product = new Product();
//				if (UOMPicker != null)
//					setDefaultUOM ();
//				if (CategoryPicker != null)
//					setDefaultCategory ();

			} else {
				NavigationItem.Title = "Edit Product";
				setProductDisplayFields ();

//				if (Product.UOM == null || Product.UOM.Trim () == "")
//					setDefaultUOM ();
//				else {
//					SelectedUOM = UOMList.Where (u => u.Name == Product.UOM).First ();
//					var uomIndex = UOMList.IndexOf (SelectedUOM);
//					UOMPicker.Select (uomIndex, 0, false);
//				}

//				if (Product.Category == null || Product.Category.Trim () == "")
//					setDefaultCategory ();
//				else if (ProductCategoryList != null) {
//					SelectedProductCategory = ProductCategoryList.Where (c => c.Name == Product.Category).First ();
//					var categoryIndex = ProductCategoryList.IndexOf (SelectedProductCategory);
//					CategoryPicker.Select (categoryIndex, 0, false);
//				}
			}

			AutoHideKeyboard();
		}
		
		void AutoHideKeyboard ()
		{
			this.ProductNameField.ShouldReturn += ( field ) =>  {
				field.ResignFirstResponder ();
				return true;
			};
			// Barcode feature was removed from Wrigley's
//			this.BarcodeIDField.ShouldReturn += ( field ) =>  {
//				field.ResignFirstResponder ();
//				return true;
//			};
//			this.VendorNameField.ShouldReturn += ( field ) =>  {
//				field.ResignFirstResponder ();
//				return true;
//			};
			// unit price, not required by Wrigley's
//			this.UnitPriceField.ShouldReturn += ( field ) =>  {
//				field.ResignFirstResponder ();
//				return true;
//			};
		}

		void setProductDisplayFields ()
		{
			ProductNameField.Text = Product.Name;

			// TODO: Remove this if SKU will no longer be used
//			if (SKUField != null) {
//				if	(Product.SKU != null)
//					SKUField.Text = Product.SKU;
//				else
//					SKUField.Text = "";
//			}

			// Barcode feature is removed for Wrigley's
//			if (Product.BarcodeID == null)
//				BarcodeIDField.Text = "";
//			else
//				BarcodeIDField.Text = Product.BarcodeID;

//			VendorNameField.Text = Product.VendorName;
			
			// unit price, not required by Wrigley's
//			if (Product.UnitPrice > 0)
//				UnitPriceField.Text = Product.UnitPrice.ToString ();
//			else
//				UnitPriceField.Text = "";
		}

//		void setDefaultUOM ()
//		{
//			// TODO: replace this with the user's preference, after it has been implemented
//			var defaultUOMIndex = (UOMList.Count / 2);
//			UOMPicker.Select (defaultUOMIndex, 0, false);
//			SelectedUOM = UOMList [defaultUOMIndex];
//			Product.UOM = UOMList [defaultUOMIndex].Name;
//		}

//		void setDefaultCategory ()
//		{
//			// TODO: replace this with the user's preference, after it has been implemented
//			if (ProductCategoryList != null) {
//			ProductCategory defaultCategory = ProductCategoryList.Where (p => p.Name.ToUpper () == "BEVERAGES").First ();
//				var defaultCategoryIndex = ProductCategoryList.IndexOf (defaultCategory);
//				CategoryPicker.Select (defaultCategoryIndex, 0, false);
//				SelectedProductCategory = ProductCategoryList [defaultCategoryIndex];
//				Product.Category = ProductCategoryList [defaultCategoryIndex].Name;
//			}
//		}

		public void setTitle (string title)
		{
			NavigationItem.Title = title;
		}

		partial void save (Foundation.NSObject sender)
		{
			var editMode = (Product.PK > 0);

			Product.Name = ProductNameField.Text;

//			if (SKUField != null)
//				Product.SKU = SKUField.Text;
			// Barcode feature was removed from Wrigley's
//			Product.BarcodeID = BarcodeIDField.Text;
//			Product.VendorName = VendorNameField.Text;
			// unit price, not required by Wrigley's
//			Product.UnitPrice = Convert.ToDecimal(UnitPriceField.Text);
			Product.UOM = SelectedUOM.Name;
			if (SelectedProductCategory != null)
				Product.Category = SelectedProductCategory.Name;

			DALFacade dal = new DALFacade ();
			dal.SaveProduct (Product);

			parentController.TableView.ReloadData();

			if (editMode) {
				NavigationController.PopViewController (true);
			}
			else {
				Product = new Product ();
				setProductDisplayFields();
//				setDefaultUOM ();
//				setDefaultCategory ();
			}
		}

		partial void dismiss (Foundation.NSObject sender)
		{
			DismissViewController (true, null);
		}
		
		public class UOMPickerModel : UIPickerViewModel
		{

			public UOMPickerModel ()
			{
				if (UOMList == null || UOMList.Count <= 0)
					UOMList = dal.getUOMList ();
			}
			
			public override nint GetComponentCount (UIPickerView picker)
			{
				return 1;
			}
			
			public override nint GetRowsInComponent (UIPickerView picker, nint component)
			{
				return UOMList.Count;
			}
			
			public override string GetTitle (UIPickerView picker, nint row, nint component)
			{
				return UOMList [(int)row].Name;
			}

			public override void Selected (UIPickerView picker, nint row, nint component)
			{
				SelectedUOM = UOMList [(int)row];
			}
			
		}

		public class CategoryPickerModel : UIPickerViewModel
		{

			public CategoryPickerModel ()
			{
				if (ProductCategoryList == null || ProductCategoryList.Count <= 0)
					ProductCategoryList = dal.getProductCategoryList ();
			}

			public override nint GetComponentCount (UIPickerView picker)
			{
				return 1;
			}

			public override nint GetRowsInComponent (UIPickerView picker, nint component)
			{
				return ProductCategoryList.Count;
			}

			public override string GetTitle (UIPickerView picker, nint row, nint component)
			{
				return ProductCategoryList [(int)row].Name;
			}

			public override void Selected (UIPickerView picker, nint row, nint component)
			{
				SelectedProductCategory = ProductCategoryList [(int)row];
			}
		}
	}
}
