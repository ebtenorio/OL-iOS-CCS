// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class ProductListingsController : UIViewController
	{
		public OrderViewController OrderController { get; set; }

		ProductListingsSource ProductListSource;

		Product _product {
			get;
			set;
		}

		public Product Product { 
			get {
				return this._product;
			} 
			set {
				this._product = value;
				//OrderController.SelectedCustomer (value);
			}
		}

		public void RefreshProductList(long providerID){

			ProductListSource = new ProductListingsSource ();
			TableView.ReloadData ();
		}

		public ProductListingsController (IntPtr handle) : base (handle)
		{
			ProductListSource = new ProductListingsSource ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();


			// Additional codes for SearchBar Scopes
			this.searchBar.ScopeButtonTitles = new string[3]{ "Product Name", "Product Code", "Product Group" };
			this.searchBar.ShowsScopeBar = true;
			this.searchBar.SizeToFit ();


			TableView.Source = ProductListSource;

			searchBar.SelectedScopeButtonIndexChanged += (object sender, UISearchBarButtonIndexEventArgs e) => {
				ProductListSource.Filter = (ProductListingsSource.SearchScope) e.SelectedScope;
				if (searchBar.Text != null && searchBar.Text.Trim().Length > 0)
					TableView.ReloadData();
				switch (e.SelectedScope) {
				case (int) ProductListingsSource.SearchScope.PRODUCT_NAME:
					searchBar.Placeholder = "Product Name";
					break;
				case (int) ProductListingsSource.SearchScope.PRODUCT_CODE:
					searchBar.Placeholder = "Product Code";
					break;
				case (int) ProductListingsSource.SearchScope.PRODUCT_GROUP:
					searchBar.Placeholder = "Product Group";
					break;
				}
			};

			searchBar.TextChanged += (object sender, UISearchBarTextChangedEventArgs e) => {
				ProductListSource.searchString = searchBar.Text;
				TableView.ReloadData ();
			};

			// TODO: find out why ResignFirstResponder doesn't work on modal windows
			searchBar.SearchButtonClicked += (sender, e) => {
				searchBar.ShowsCancelButton = false;
				searchBar.ResignFirstResponder();
			};

			searchBar.OnEditingStarted += (sender, e) => {
				searchBar.ShowsCancelButton = true;
			};

			searchBar.CancelButtonClicked += (sender, e) => {
				searchBar.ShowsCancelButton = false;
				searchBar.ResignFirstResponder();
			};

		}
			
	}
}
