// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using System.Threading.Tasks;
using Foundation;
using UIKit;
using BigTed;

using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class LoginViewController : UIViewController
	{
		protected SpinnerOverlay Spinner = null;
		private DALFacade dal = new DALFacade ();
		private WebServiceFacade ws = new WebServiceFacade ();
		public AppInfoViewController AppInfoViewController { get; set; }
		public string CurrentUser { get; set;}

		public LoginViewController (IntPtr handle) : base (handle)
		{
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();


			// Disable Cancel BarItem if the device has been registered with the useraccount, else enable it.
			if (dal.getUserAccount () != null  && Identity.FindKeyChainEntryForDeviceIdentifier()) {
				this.loginToolBar.Items [0].Enabled = true;
			} else {
				this.loginToolBar.Items [0].Enabled = false;
			}


			if (this.dal.getUserAccount () == null)
				this.UserNameField.Text = "";
			else
				this.UserNameField.Text = this.dal.getUserAccount ().Username.ToString ();

			PasswordField.ShouldReturn += (textfield) => {
				if (this.PasswordField.Text != null && this.PasswordField.Text.Trim ().Length > 0) {
					BeginInvokeOnMainThread (() => {
						this.PasswordField.ResignFirstResponder ();
					});
					Register (this.PasswordField);
				}
				return true;
			};
		}

		partial void Register (Foundation.NSObject sender)
		{
			string username = UserNameField.Text;
			string password = PasswordField.Text;
	
			UserAccount userAccount = null;

			string _errorMessage = "";
			string _errorHeader = "";


			if((Reachability.InternetConnectionStatus() == NetworkStatus.ReachableViaCarrierDataNetwork || 
				Reachability.InternetConnectionStatus() == NetworkStatus.ReachableViaWiFiNetwork )) {


				if (ws.IsCorrectRegistryWSVersion (Identity.MajorVersion (), Identity.MinorVersion (), out _errorMessage, out _errorHeader)) {

				if (username != null && username.Trim ().Length > 0 &&  password != null && password.Trim ().Length > 0) {

					// REGISTRATION
					BTProgressHUD.Show (maskType: ProgressHUD.MaskType.Gradient);
					Task.Factory.StartNew (() => {
						try {

							// Registration
							Logger.log ("Starting registration.");
							userAccount = RegisterDevice (username, password);
							Logger.log ("Done with registration.");
								
						} catch (Exception e) {
							Logger.log (e.Message);
						}

					}).ContinueWith (t => {
					BeginInvokeOnMainThread (() => {
						BTProgressHUD.Dismiss ();
						if (userAccount != null && userAccount.AccountID > 0) {
							
								AppInfoViewController.ShowDatabaseRecords();


									UIAlertView _alert =  new UIAlertView ("Congratulations", 
										"Device was successfully registered.",null, "OK", null);


									UIAlertView __alert =  new UIAlertView ("Synchronize Database", 
										"Data will now be Synchronized with the server.\nThis might take a few minutes to complete.",null, "OK", null);

								

									_alert.Dismissed += (object s, UIButtonEventArgs e) => {


										if (e.ButtonIndex == 0) {


											__alert.Dismissed += (object ss, UIButtonEventArgs ee) => {
												if (e.ButtonIndex == 0) {

													BTProgressHUD.Show (maskType: ProgressHUD.MaskType.Gradient);

													Task.Factory.StartNew(() => {
														BTProgressHUD.Show (maskType: ProgressHUD.MaskType.Gradient);
														this.AppInfoViewController.DeleteOldOrders(Constants.PurgePeriodInDays);
														Logger.log("Starting synchronization.");
														AppInfoViewController.SynchronizeReferenceData();
														Logger.log("Synchronization done.");
																		
													}).ContinueWith( t1 => {

														BeginInvokeOnMainThread (() => {
															BTProgressHUD.Dismiss();
															DismissViewController (true, null);
														});
													});
												}
											};

											__alert.Show();
										}
									};

								_alert.Show ();
								AppInfoViewController.ShowDatabaseRecords();
								AppInfoViewController.EnableSyncButton(true);

							} else {
							new UIAlertView ("Login Failed", "Please make sure you entered the correct username and password",
									null, "OK", null).Show ();
							}
						});
					});


				} else {
					new UIAlertView ("Username and Password Required", "Please enter your username and password.", null, "OK", null).Show ();
				}
					
			}
			else{
				// Alert when the App and WS versions are incorrect
					new UIAlertView (_errorHeader, _errorMessage, null, "OK", null).Show ();
				}
			}
			else{
				// No internet connection
				Logger.log("Please check network connection.");
				new UIAlertView ("Network connection error", "Please check network connection",	null, "OK", null).Show();
			}
		}
			
		private UserAccount RegisterDevice (string username, string password)
		{


		// DELETE THIS! Only for testing

			// Check if the IDFV prior registration was stored in the keychain, create it in KeyChain if absent.
			if (!(Identity.FindKeyChainEntryForDeviceIdentifier ())) {
				Identity.SaveKeyChainEntryForDeviceIdentifier (Identity.DeviceID);
			}

			// Check if an entry for OrderLinc Version is present.
			if (!(Identity.FindKeyChainEntryForOrderLincVersion ())) {
				Identity.SaveKeyChainEntryForOrderLincVersion();
			}
				
			var userAccount = ws.registerDevice (username, password,  NSBundle.MainBundle.InfoDictionary["CFBundleShortVersionString"].ToString() + "-" + NSBundle.MainBundle.InfoDictionary["CFBundleVersion"].ToString(), UIDevice.CurrentDevice.SystemVersion );
			if (userAccount != null && userAccount.AccountID > 0) {
				Identity.SaveKeyChainEntry (userAccount.Username, password);

				// Check if an entry for Last Version Release Date is present
				//if (!(Identity.FindKeyChainEntryForLastVersionReleaseDate ())) {
				//	Identity.DeleteKeyChainEntryForOrderLincVersion ();
				Identity.SaveKeyChainEntryForLastVersionReleaseDate (ws.LastVersionReleaseDate ().ToString ());
				//}


				dal.saveUserAccount (userAccount);
				// the logo should be downloaded from the server and saved locally.
				ws.downloadLogo (userAccount);
				AppInfoViewController.ResetLogo ();
			}
			return userAccount;
		}

		partial void Cancel (Foundation.NSObject sender)
		{
			DismissViewController (true, null);
		}

		public override void DismissViewController (bool animated, Action completionHandler)
		{
			base.DismissViewController (animated, completionHandler);
			this.AppInfoViewController.ShowDatabaseRecords();

		}
	}
}
