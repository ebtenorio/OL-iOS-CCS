// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace OneTradeCentral.iOS.OrderLincRegistry {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="Service1Soap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VersionControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterDeviceOperationCompleted;
        
        public Service1() {
            
        }
        
        public Service1(string url) {
            this.Url = url;
        }
        
        public event VersionControlCompletedEventHandler VersionControlCompleted;
        
        public event LoginCompletedEventHandler LoginCompleted;
        
        public event RegisterDeviceCompletedEventHandler RegisterDeviceCompleted;
        
        public event UnRegisterDeviceCompletedEventHandler UnRegisterDeviceCompleted;
        
        /// <remarks>
///Check Application Version
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VersionControl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool VersionControl(string VersionMajor, string VersionMinor, out string ErroMessage) {
            object[] results = this.Invoke("VersionControl", new object[] {
                        VersionMajor,
                        VersionMinor});
            ErroMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginVersionControl(string VersionMajor, string VersionMinor, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VersionControl", new object[] {
                        VersionMajor,
                        VersionMinor}, callback, asyncState);
        }
        
        public bool EndVersionControl(System.IAsyncResult asyncResult, out string ErroMessage) {
            object[] results = this.EndInvoke(asyncResult);
            ErroMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        public void VersionControlAsync(string VersionMajor, string VersionMinor) {
            this.VersionControlAsync(VersionMajor, VersionMinor, null);
        }
        
        public void VersionControlAsync(string VersionMajor, string VersionMinor, object userState) {
            if ((this.VersionControlOperationCompleted == null)) {
                this.VersionControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVersionControlCompleted);
            }
            this.InvokeAsync("VersionControl", new object[] {
                        VersionMajor,
                        VersionMinor}, this.VersionControlOperationCompleted, userState);
        }
        
        private void OnVersionControlCompleted(object arg) {
            if ((this.VersionControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VersionControlCompleted(this, new VersionControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public DTOMobileAccount Login(string mUserName, string mPassword, string mDeviceNo) {
            object[] results = this.Invoke("Login", new object[] {
                        mUserName,
                        mPassword,
                        mDeviceNo});
            return ((DTOMobileAccount)(results[0]));
        }
        
        public System.IAsyncResult BeginLogin(string mUserName, string mPassword, string mDeviceNo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        mUserName,
                        mPassword,
                        mDeviceNo}, callback, asyncState);
        }
        
        public DTOMobileAccount EndLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DTOMobileAccount)(results[0]));
        }
        
        public void LoginAsync(string mUserName, string mPassword, string mDeviceNo) {
            this.LoginAsync(mUserName, mPassword, mDeviceNo, null);
        }
        
        public void LoginAsync(string mUserName, string mPassword, string mDeviceNo, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        mUserName,
                        mPassword,
                        mDeviceNo}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public DTOMobileAccount RegisterDevice(string mUserName, string mPassword, string mDeviceNo) {
            object[] results = this.Invoke("RegisterDevice", new object[] {
                        mUserName,
                        mPassword,
                        mDeviceNo});
            return ((DTOMobileAccount)(results[0]));
        }
        
        public System.IAsyncResult BeginRegisterDevice(string mUserName, string mPassword, string mDeviceNo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterDevice", new object[] {
                        mUserName,
                        mPassword,
                        mDeviceNo}, callback, asyncState);
        }
        
        public DTOMobileAccount EndRegisterDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DTOMobileAccount)(results[0]));
        }
        
        public void RegisterDeviceAsync(string mUserName, string mPassword, string mDeviceNo) {
            this.RegisterDeviceAsync(mUserName, mPassword, mDeviceNo, null);
        }
        
        public void RegisterDeviceAsync(string mUserName, string mPassword, string mDeviceNo, object userState) {
            if ((this.RegisterDeviceOperationCompleted == null)) {
                this.RegisterDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDeviceCompleted);
            }
            this.InvokeAsync("RegisterDevice", new object[] {
                        mUserName,
                        mPassword,
                        mDeviceNo}, this.RegisterDeviceOperationCompleted, userState);
        }
        
        private void OnRegisterDeviceCompleted(object arg) {
            if ((this.RegisterDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterDeviceCompleted(this, new RegisterDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnRegisterDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool UnRegisterDevice(string mUserName, string mPassword) {
            object[] results = this.Invoke("UnRegisterDevice", new object[] {
                        mUserName,
                        mPassword});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginUnRegisterDevice(string mUserName, string mPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnRegisterDevice", new object[] {
                        mUserName,
                        mPassword}, callback, asyncState);
        }
        
        public bool EndUnRegisterDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void UnRegisterDeviceAsync(string mUserName, string mPassword) {
            this.UnRegisterDeviceAsync(mUserName, mPassword, null);
        }
        
        public void UnRegisterDeviceAsync(string mUserName, string mPassword, object userState) {
            if ((this.UnRegisterDeviceOperationCompleted == null)) {
                this.UnRegisterDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterDeviceCompleted);
            }
            this.InvokeAsync("UnRegisterDevice", new object[] {
                        mUserName,
                        mPassword}, this.UnRegisterDeviceOperationCompleted, userState);
        }
        
        private void OnUnRegisterDeviceCompleted(object arg) {
            if ((this.UnRegisterDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterDeviceCompleted(this, new UnRegisterDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DTOMobileAccount {
        
        /// <remarks/>
        public long AccountID;
        
        /// <remarks/>
        public long RefID;
        
        /// <remarks/>
        public int AccountTypeID;
        
        /// <remarks/>
        public int OrgUnitID;
        
        /// <remarks/>
        public string Username;
        
        /// <remarks/>
        public string Password;
        
        /// <remarks/>
        public string DeviceNo;
        
        /// <remarks/>
        public int RoleID;
        
        /// <remarks/>
        public long AddressID;
        
        /// <remarks/>
        public long ContactID;
        
        /// <remarks/>
        public bool Lockout;
        
        /// <remarks/>
        public string LastIpAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> DateLockout;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> LastLoginDate;
        
        /// <remarks/>
        public System.DateTime DateCreated;
        
        /// <remarks/>
        public System.DateTime DateUpdated;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> ExpiryDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> DateActivated;
        
        /// <remarks/>
        public System.DateTime StartDate;
        
        /// <remarks/>
        public System.DateTime EndDate;
        
        /// <remarks/>
        public string LastName;
        
        /// <remarks/>
        public string FirstName;
        
        /// <remarks/>
        public string Email;
        
        /// <remarks/>
        public string AccountTypeText;
        
        /// <remarks/>
        public string ServerUrl;
        
        /// <remarks/>
        public string Logo;
    }
    
    public partial class VersionControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VersionControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string ErroMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public delegate void VersionControlCompletedEventHandler(object sender, VersionControlCompletedEventArgs args);
    
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DTOMobileAccount Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DTOMobileAccount)(this.results[0]));
            }
        }
    }
    
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs args);
    
    public partial class RegisterDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DTOMobileAccount Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DTOMobileAccount)(this.results[0]));
            }
        }
    }
    
    public delegate void RegisterDeviceCompletedEventHandler(object sender, RegisterDeviceCompletedEventArgs args);
    
    public partial class UnRegisterDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnRegisterDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void UnRegisterDeviceCompletedEventHandler(object sender, UnRegisterDeviceCompletedEventArgs args);
}
